batch
set a 1
set b 2
----

compact a-b
----
6:
  5:[a#0,SET-b#1,SET]

batch
set c 3
set d 4
----

compact c-d
----
6:
  5:[a#0,SET-b#1,SET]
  7:[c#2,SET-d#3,SET]

batch
set b 5
set c 6
----

compact a-d
----
6:
  10:[a#0,SET-d#0,SET]

# This also tests flushing a memtable that only contains range
# deletions.

batch
del-range a e
----

compact a-d
----

# Test that a multi-output-file compaction generates non-overlapping files.

define target-file-sizes=(100, 1)
L0
  b.SET.1:v
L0
  a.SET.2:v
----
0:
  4:[b-b]
  5:[a-a]

compact a-b
----
6:
  6:[a#0,SET-a#0,SET]
  7:[b#0,SET-b#0,SET]

# A range tombstone extends past the grandparent file boundary used to limit the
# size of future compactions. Verify the range tombstone is split at that file
# boundary.

define target-file-sizes=(1, 1, 1, 1)
L1
  a.SET.3:v
L2
  a.RANGEDEL.2:e
L3
  a.SET.0:v
  b.SET.0:v
L3
  c.SET.0:v
  d.SET.0:v
----
1:
  4:[a-a]
2:
  5:[a-e]
3:
  6:[a-b]
  7:[c-d]

compact a-e L1
----
2:
  8:[a#3,SET-b#72057594037927935,RANGEDEL]
  9:[b#0,RANGEDEL-d#72057594037927935,RANGEDEL]
  10:[d#0,RANGEDEL-e#72057594037927935,RANGEDEL]
3:
  6:[a#0,SET-b#0,SET]
  7:[c#0,SET-d#0,SET]

# Same as above, except range tombstone covers multiple grandparent file boundaries.

define target-file-sizes=(1, 1, 1, 1)
L1
  a.SET.3:v
L2
  a.RANGEDEL.2:g
L3
  a.SET.0:v
  b.SET.0:v
L3
  c.SET.0:v
  d.SET.0:v
L3
  e.SET.0:v
  f.SET.1:v
L3
  f.SET.0:v
  g.SET.0:v
----
1:
  4:[a-a]
2:
  5:[a-g]
3:
  6:[a-b]
  7:[c-d]
  8:[e-f]
  9:[f-g]

compact a-e L1
----
2:
  10:[a#3,SET-b#72057594037927935,RANGEDEL]
  11:[b#0,RANGEDEL-d#72057594037927935,RANGEDEL]
  12:[d#0,RANGEDEL-f#72057594037927935,RANGEDEL]
  13:[f#0,RANGEDEL-g#72057594037927935,RANGEDEL]
3:
  6:[a#0,SET-b#0,SET]
  7:[c#0,SET-d#0,SET]
  8:[e#0,SET-f#1,SET]
  9:[f#0,SET-g#0,SET]

# A range tombstone covers multiple grandparent file boundaries between point keys,
# rather than after all point keys.

define target-file-sizes=(1, 1, 1, 1)
L1
  a.SET.3:v
  h.SET.3:v
L2
  a.RANGEDEL.2:g
L3
  a.SET.0:v
  b.SET.0:v
L3
  c.SET.0:v
  d.SET.0:v
L3
  e.SET.0:v
  f.SET.1:v
----
1:
  4:[a-h]
2:
  5:[a-g]
3:
  6:[a-b]
  7:[c-d]
  8:[e-f]

compact a-e L1
----
2:
  9:[a#3,SET-b#72057594037927935,RANGEDEL]
  10:[b#0,RANGEDEL-d#72057594037927935,RANGEDEL]
  11:[d#0,RANGEDEL-f#72057594037927935,RANGEDEL]
  12:[f#0,RANGEDEL-h#3,SET]
3:
  6:[a#0,SET-b#0,SET]
  7:[c#0,SET-d#0,SET]
  8:[e#0,SET-f#1,SET]

# A range tombstone is the first and only item output by a compaction, and it
# extends past the grandparent file boundary used to limit the size of future
# compactions. Verify the range tombstone is split at that file boundary.

define target-file-sizes=(1, 1, 1, 1)
L1
  a.RANGEDEL.3:e
L2
  a.SET.2:v
L3
  a.SET.0:v
  b.SET.0:v
L3
  c.SET.0:v
  d.SET.0:v
----
1:
  4:[a-e]
2:
  5:[a-a]
3:
  6:[a-b]
  7:[c-d]

compact a-e L1
----
2:
  8:[a#3,RANGEDEL-b#72057594037927935,RANGEDEL]
  9:[b#0,RANGEDEL-d#72057594037927935,RANGEDEL]
  10:[d#0,RANGEDEL-e#72057594037927935,RANGEDEL]
3:
  6:[a#0,SET-b#0,SET]
  7:[c#0,SET-d#0,SET]

# Setup such that grandparent overlap limit is exceeded multiple times at the same user key ("b").
# Ensures the compaction output files are non-overlapping.

define target-file-sizes=(1, 1, 1, 1)
L1
  a.SET.2:v
  c.SET.2:v
L2
  a.RANGEDEL.3:c
L3
  b.SET.2:v
L3
  b.SET.1:v
L3
  b.SET.0:v
----
1:
  4:[a-c]
2:
  5:[a-c]
3:
  6:[b-b]
  7:[b-b]
  8:[b-b]

compact a-c L1
----
2:
  9:[a#3,RANGEDEL-b#72057594037927935,RANGEDEL]
  10:[b#0,RANGEDEL-c#2,SET]
3:
  6:[b#2,SET-b#2,SET]
  7:[b#1,SET-b#1,SET]
  8:[b#0,SET-b#0,SET]
